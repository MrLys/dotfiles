-- Setup nvim-cmp.
--local cmp = require('cmp')
--local source_mapping = {
--	youtube = "[Suck it YT]",
--	buffer = "[Buffer]",
--	nvim_lsp = "[LSP]",
--	nvim_lua = "[Lua]",
--	cmp_tabnine = "[TN]",
--	path = "[Path]",
--}
--local lspkind = require("lspkind")
--
--cmp.setup({
--    snippet = {
--	expand = function(args)
--	    -- For `vsnip` user.
--	    -- vim.fn['vsnip#anonymous'](args.body)
--
--	    -- For `luasnip` user.
--	    require('luasnip').lsp_expand(args.body)
--
--	    -- For `ultisnips` user.
--	    -- vim.fn['UltiSnips#Anon'](args.body)
--	end,
--    },
--    mapping = cmp.mapping.preset.insert({
--	['<C-y>'] = cmp.mapping.confirm({ select = true }),
--	['<C-u>'] = cmp.mapping.scroll_docs(-4),
--	['<C-d>'] = cmp.mapping.scroll_docs(4),
--	['<C-Space>'] = cmp.mapping.complete(),
--    }),
--
--    formatting = {
--	format = function(entry, vim_item)
--	    vim_item.kind = lspkind.presets.default[vim_item.kind]
--	    local menu = source_mapping[entry.source.name]
--	    if entry.source.name == "cmp_tabnine" then
--		if entry.completion_item.data ~= nil and entry.completion_item.data.detail ~= nil then
--		    menu = entry.completion_item.data.detail .. " " .. menu
--		end
--		vim_item.kind = "ïƒ§"
--	    end
--	    vim_item.menu = menu
--	    return vim_item
--	end,
--
--    },
--
--    sources = {
--	-- tabnine completion? yayaya
--
--	{ name = 'cmp_tabnine' },
--
--	{ name = 'nvim_lsp' },
--
--	-- For vsnip user.
--	-- { name = 'vsnip' },
--
--	-- For luasnip user.
--	{ name = 'luasnip' },
--
--	-- For ultisnips user.
--	-- { name = 'ultisnips' },
--
--	{ name = 'buffer' },
--
--	{ name = 'youtube' },
--	{ name = 'nvim_lsp_signature_help' }
--    },
--})
--local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
--capabilities.textDocument.completion.completionItem.snippetSupport = true
---- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
--local tabnine = require('cmp_tabnine.config')
--tabnine:setup({
--    max_lines = 1000,
--    max_num_results = 20,
--    sort = true,
--    run_on_every_keystroke = true,
--    snippet_placeholder = '..',
--})
--
--
--
--
---- who even uses this?
--
--
--local lspconfig = require('lspconfig')
--lspconfig.sumneko_lua.setup({
--    settings = {
--	Lua = {
--	    runtime = {
--		-- Tell the language server which version of Lua you're using (most likely LuaJIT in the case of Neovim)
--		version = 'LuaJIT',
--		-- Setup your lua path
--		path = vim.split(package.path, ';'),
--	    },
--	    diagnostics = {
--		globals = {
--		    -- vim
--		    'vim',
--		},
--
--		workspace = {
--		    -- Make the server aware of Neovim runtime files
--		    library = vim.api.nvim_get_runtime_file('', true),
--		}
--	    },
--	}
--    },
--    capabilities = capabilities
--
--})
--
--local opts = {
--    -- whether to highlight the currently hovered symbol
--    -- disable if your cpu usage is higher than you want it
--    -- or you just hate the highlight
--    -- default: true
--    highlight_hovered_item = true,
--
--    -- whether to show outline guides
--    -- default: true
--    show_guides = true,
--}
--
--local cmp = require'cmp'
--
--  cmp.setup({
--    snippet = {
--      -- REQUIRED - you must specify a snippet engine
--      expand = function(args)
--        vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
--        -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
--        -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
--        -- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
--      end,
--    },
--    window = {
--      -- completion = cmp.config.window.bordered(),
--      -- documentation = cmp.config.window.bordered(),
--    },
--    mapping = cmp.mapping.preset.insert({
--      ['<C-b>'] = cmp.mapping.scroll_docs(-4),
--      ['<C-f>'] = cmp.mapping.scroll_docs(4),
--      ['<C-Space>'] = cmp.mapping.complete(),
--      ['<C-e>'] = cmp.mapping.abort(),
--      ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
--    }),
--    sources = cmp.config.sources({
--      { name = 'nvim_lsp' },
--      { name = 'vsnip' }, -- For vsnip users.
--      -- { name = 'luasnip' }, -- For luasnip users.
--      -- { name = 'ultisnips' }, -- For ultisnips users.
--      -- { name = 'snippy' }, -- For snippy users.
--    }, {
--      { name = 'buffer' },
--    })
--  })
--
--  -- Set configuration for specific filetype.
--  cmp.setup.filetype('gitcommit', {
--    sources = cmp.config.sources({
--      { name = 'cmp_git' }, -- You can specify the `cmp_git` source if you were installed it.
--    }, {
--      { name = 'buffer' },
--    })
--  })
--
--  -- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
--  cmp.setup.cmdline('/', {
--    mapping = cmp.mapping.preset.cmdline(),
--    sources = {
--      { name = 'buffer' }
--    }
--  })
--
--  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
--  cmp.setup.cmdline(':', {
--    mapping = cmp.mapping.preset.cmdline(),
--    sources = cmp.config.sources({
--      { name = 'path' }
--    }, {
--      { name = 'cmdline' }
--    })
--  })
--
--  -- Set up lspconfig.
--  local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
--  -- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
--  require('lspconfig')['sumneko_lua'].setup {
--       settings = {
--    Lua = {
--      runtime = {
--        -- Tell the language server which version of Lua you're using (most likely LuaJIT in the case of Neovim)
--        version = 'LuaJIT',
--      },
--      diagnostics = {
--        -- Get the language server to recognize the `vim` global
--        globals = {'vim'},
--      },
--      workspace = {
--        -- Make the server aware of Neovim runtime files
--        library = vim.api.nvim_get_runtime_file("", true),
--      },
--      -- Do not send telemetry data containing a randomized but unique identifier
--      telemetry = {
--        enable = false,
--      },
--    },
--  },
--
--  }
--
